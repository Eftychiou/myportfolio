/* eslint-disable react/display-name */
import type { CylinderProps } from '@react-three/cannon';
import { useCompoundBody } from '@react-three/cannon';
import { useGLTF } from '@react-three/drei';
import { forwardRef } from 'react';
import type { Group, Material, Mesh } from 'three';
// import type { GLTF } from 'three-stdlib/loaders/GLTFLoader'

useGLTF.preload('/model/wheel.glb');

// Initially Auto-generated by: https://github.com/pmndrs/gltfjsx

type WheelGLTF = any & {
  materials: Record<'Chrom' | 'Rubber' | 'Steel', Material>;
  nodes: Record<'wheel_1' | 'wheel_2' | 'wheel_3', Mesh>;
};

type WheelProps = CylinderProps & {
  leftSide?: boolean;
  radius: number;
};

export const Wheel = forwardRef<Group, WheelProps>(({ leftSide, radius = 0.7, ...props }, ref) => {
  const {
    materials: { Chrom, Rubber, Steel },
    nodes
  } = useGLTF('/model//wheel.glb') as WheelGLTF;
  // const { nodes, materials, animations }: any = useGLTF('./model/car.gltf');

  useCompoundBody(
    () => ({
      collisionFilterGroup: 0,
      mass: 1,
      material: 'wheel',
      shapes: [{ args: [radius, radius, 0.5, 16], rotation: [0, 0, -Math.PI / 2], type: 'Cylinder' }],
      type: 'Kinematic',
      ...props
    }),
    ref
  );

  return (
    <group ref={ref}>
      <group rotation={[0, 0, ((leftSide ? 1 : -1) * Math.PI) / 2]}>
        <mesh material={Rubber} geometry={nodes.wheel_1.geometry} />
        <mesh material={Steel} geometry={nodes.wheel_2.geometry} />
        <mesh material={Chrom} geometry={nodes.wheel_3.geometry} />
      </group>
    </group>
    // <group
    //   ref={ref}
    //   name='Front_wheel'
    //   position={[155.621, 9.27, -127.28]}
    //   rotation={[0, 0, -1.403]}
    //   scale={[0.2, 0.2, 0.2]}
    // >
    //   <mesh name='Front_wheel_Black_0' geometry={nodes.Front_wheel_Black_0.geometry} material={materials.Black} />
    //   <mesh
    //     name='Front_wheel_Light_black_0'
    //     geometry={nodes.Front_wheel_Light_black_0.geometry}
    //     material={materials.Light_black}
    //   />
    // </group>
  );
});
